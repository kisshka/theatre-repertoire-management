@page "/events"
@page "/"

<PageTitle>Мероприятия</PageTitle>
<Calendar Value="currentDate" DateCellRender="DateCellRender" HeaderRender="CustomHead" />

@code
{
    private DateTime currentDate = DateTime.Now;

    class ListData
    {
        public BadgeStatus type;
        public string content;
    }

@* Заполенение календаря данными о событиях *@
    private List<ListData> GetListData(DateTime value)
    {
        List<ListData> listData = null;
        switch (value.Day)
        {
            case 8:
                listData = new List<ListData>
                {
                new ListData { type = BadgeStatus.Warning, content = "This is warning event." },
                new ListData { type = BadgeStatus.Success, content = "This is usual event." },
                };
                break;
            case 15:
                listData = new List<ListData> {
                new ListData { type = BadgeStatus.Warning, content = "This is warning event" },
                new ListData { type = BadgeStatus.Success, content = "This is very long usual event。。...." },
                new ListData { type = BadgeStatus.Error, content = "This is error event 1." },
                };
                break;
        }
        return listData ?? new List<ListData>();
    }

@* Шапка календаря *@
    private RenderFragment CustomHead(CalendarHeaderRenderArgs calendarHeaderRenderArgs)
    {
        return @<Template>
        <div class="calendar-header">
            <Button onclick="PreviusMonth">
                <Icon class="calendar-icons" Type="@IconType.Outline.Left" />
            </Button>

            <DatePicker ValueChanged="OnValueChanged" AllowClear="false" Value="currentDate" ShowToday="true" TValue="DateTime"
                Picker="DatePickerType.Month" />

            <Button onclick="NextMonth">
                <Icon class="calendar-icons" Type="@IconType.Outline.Right" />
            </Button>
        </div>
        </Template>;
    }

@* Обработчики кнопок шапки*@
    private void OnValueChanged(DateTime newDate)
    {
        currentDate = newDate;
    }
    private void NextMonth()
    {
        currentDate = currentDate.AddMonths(1);
        StateHasChanged();
    }
    private void PreviusMonth()
    {
        currentDate = currentDate.AddMonths(-1);
        StateHasChanged();
    }

    private RenderFragment DateCellRender(DateTime value)
    {
        var listData = GetListData(value);
        return @<Template>
            <ul class="events">
                @foreach (var data in listData)
                {
                    <li key="@data.content">
                        <Badge Status="@data.type" Text="@data.content" />
                    </li>
                }
            </ul>
        </Template>;
    }
}